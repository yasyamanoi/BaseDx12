/*!
@file PhysicsManager.h
@brief 物理計算用マネージャなど
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/
#pragma once
#include "stdafx.h"

namespace basedx12 {

	//--------------------------------------------------------------------------------------
	///	物理計算コンポーネントの親
	//--------------------------------------------------------------------------------------
	class Rigidbody : public Component {
		//自動的にTransformコンポーネントを反映するかどうか
		bool m_AutoTransform;
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Rigidbody(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Rigidbody();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief 自動的にTransformを変更するかどうかを得る
		@return	自動的にTransformを変更するかどうか
		*/
		//--------------------------------------------------------------------------------------
		bool IsAutoTransform() const {
			return m_AutoTransform;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 自動的にTransformを変更するかどうかを設定する
		@param[in]	b	自動的にTransformを変更するかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAutoTransform(bool b) {
			m_AutoTransform = b;
		}

		virtual void OnInit()override {}
//		virtual void OnUpdate()override {}
		virtual void OnDraw()override {}
		virtual void OnDestroy()override {}

	};

	//--------------------------------------------------------------------------------------
	///	単体の物理計算コンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodySingle : public Rigidbody {
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodySingle(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodySingle();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを得る
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetStatus(PsBodyStatus& st) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を得る
		@return	剛体の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetPosition() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の姿勢を得る
		@return	剛体の姿勢
		*/
		//--------------------------------------------------------------------------------------
		bsm::Quat	GetOrientation() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を得る
		@return	剛体の速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetLinearVelocity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を得る
		@return	剛体の回転速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetAngularVelocity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを設定する
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStatus(const PsBodyUpdateStatus& st);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を起こす（sleepが有効の場合）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void WakeUp();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを得る
		@return	重力を計算すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsAutoGravity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを設定する
		@param[in]	b	設定する値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAutoGravity(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(const bsm::Float3& pos);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOrientation(const bsm::Quat& qt);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を設定する
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLinearVelocity(const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を設定する
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAngularVelocity(const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度をtimeStepでposに移動するよう設定する
		@param[in]	pos	移動位置
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MovePosition(const bsm::Float3 &pos, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度をtimeStepでqtになるよう設定する
		@param[in]	qt	目標の回転
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MoveOrientation(const bsm::Quat& qt, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のフォースを追加する
		@param[in]	v	フォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyForce(const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のトルクを追加する
		@param[in]	v	トルク
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyTorque(const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突セルフ衝突フィルターを設定する
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterSelf(uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突ターゲット衝突フィルターを設定する
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterTarget(uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプを設定する
		@param[in]	t	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMotionType(PsMotionType t);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプをを得る
		@return	形状数
		*/
		//--------------------------------------------------------------------------------------
		PsMotionType GetMotionType()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る（純粋仮想関数）
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手の配列(インデックス)を得る
		@param[out]	contacts	相手のIDの配列
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsVec(vector<uint16_t>& contacts)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手のset集合を得る
		@param[out]	contacts	相手のIDのset集合
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsSet(set<uint16_t>& contacts)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手の配列(ゲームオブジェクト)を得る
		@param[out]	objects	相手のゲームオブジェクトの配列
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactGameObjects(vector<shared_ptr<GameObject>>& objects)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	破棄されるとき
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDestroy()override;
	};

	//--------------------------------------------------------------------------------------
	///	単体の球体コンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodySphere : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsSphere> m_PsSphere;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	球体の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodySphere(const shared_ptr<GameObject>& GameObjectPtr,const PsSphereParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodySphere() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsSphere> GetPsSphere()const {
			return m_PsSphere;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsSphereParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	SPHEREを得る
		@return	簡易衝突判定に利用できるSPHEREを得る
		*/
		//--------------------------------------------------------------------------------------
		SPHERE GetSPHERE() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsSphereParam& param, uint16_t index);
	};

	//--------------------------------------------------------------------------------------
	///	単体のボックスコンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodyBox : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsBox> m_PsBox;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyBox(const shared_ptr<GameObject>& GameObjectPtr,const PsBoxParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyBox() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsBox> GetPsBox()const {
			return m_PsBox;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsBoxParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	OBBを得る
		@return	簡易衝突判定に利用できるOBBを得る
		*/
		//--------------------------------------------------------------------------------------
		OBB GetOBB() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsBoxParam& param, uint16_t index);
	};

	//--------------------------------------------------------------------------------------
	///	単体のカプセルコンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodyCapsule : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsCapsule> m_PsCapsule;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyCapsule(const shared_ptr<GameObject>& GameObjectPtr, const PsCapsuleParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyCapsule() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCapsule> GetPsCapsule()const {
			return m_PsCapsule;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCapsuleParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	CAPSULEを得る
		@return	簡易衝突判定に利用できるCAPSULEを得る
		*/
		//--------------------------------------------------------------------------------------
		CAPSULE GetCAPSULE() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCapsuleParam& param, uint16_t index);
	};


	//--------------------------------------------------------------------------------------
	///	単体のシリンダーコンポーネント。シリンダーは、ボックスの縁からの落下時に不具合があるので、利用は慎重に！
	//--------------------------------------------------------------------------------------
	class RigidbodyCylinder : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsCylinder> m_PsCylinder;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyCylinder(const shared_ptr<GameObject>& GameObjectPtr, const PsCylinderParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyCylinder() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCylinder> GetPsCylinder()const {
			return m_PsCylinder;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCylinderParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCylinderParam& param, uint16_t index);
	};

	//--------------------------------------------------------------------------------------
	///	単体の凸面コンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodyConvex : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsConvex> m_PsConvex;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyConvex(const shared_ptr<GameObject>& GameObjectPtr, const PsConvexParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyConvex() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsConvex> GetPsConvex()const {
			return m_PsConvex;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsConvexParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsConvexParam& param, uint16_t index);
	};

	//--------------------------------------------------------------------------------------
	///	プリミティブ合成コンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodyCombined : public RigidbodySingle {
		//物理計算用のオブジェクト
		shared_ptr<PsCombined> m_PsCombined;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyCombined(const shared_ptr<GameObject>& GameObjectPtr, const PsCombinedParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyCombined() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCombined> GetPsCombined()const {
			return m_PsCombined;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCombinedParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCombinedParam& param, uint16_t index);
	};

	//--------------------------------------------------------------------------------------
	///	マルチ物理コンポーネント
	//--------------------------------------------------------------------------------------
	class RigidbodyMulti : public Rigidbody {
		//物理オブジェクトの配列
		vector <shared_ptr<PsObject>> m_PsObjectVec;
		//ジョイントの配列
		vector<shared_ptr<PsJoint>> m_PsJointVec;
		//マルチオブジェクトインデックスが有効かチェックする（無効なら例外）
		void CheckObjIndex(size_t index) const;
		//マルチジョイントインデックスが有効かチェックする（無効なら例外）
		void CheckJointIndex(size_t index) const;
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit RigidbodyMulti(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyMulti();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PsObjectの配列を得る
		@return　PsObjectの配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<shared_ptr<PsObject>>& GetPsObjectVec() const {
			return m_PsObjectVec;
		}
		vector<shared_ptr<PsObject>>& GetPsObjectVec() {
			return m_PsObjectVec;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	球体の追加
		@param[in]	param 作成パラメータ
		@return	マルチボディのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t  AddSphere(const PsSphereParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボックスの追加
		@param[in]	param 作成パラメータ
		@return	マルチボディのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddBox(const PsBoxParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カプセルの追加
		@param[in]	param 作成パラメータ
		@return	マルチボディのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddCapsule(const PsCapsuleParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	シリンダーの追加
		@param[in]	param 作成パラメータ
		@return	マルチボディのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddCylinder(const PsCylinderParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	凸型オブジェクトの追加
		@param[in]	param 作成パラメータ
		@return	マルチボディのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddConvex(const PsConvexParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PsJointの配列を得る
		@return　PsJointの配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<shared_ptr<PsJoint>>& GetPsJointVec() const {
			return m_PsJointVec;
		}
		vector<shared_ptr<PsJoint>>& GetPsJointVec(){
			return m_PsJointVec;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボールジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddBallJoint(const PsBallJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	球関節ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddSwingTwistJoint(const PsSwingTwistJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	蝶番ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddHingeJoint(const PsHingeJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スライダージョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddSliderJoint(const PsSliderJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	固定ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddFixJoint(const PsFixJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ユニバーサルジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	マルチジョイントのインデックス
		*/
		//--------------------------------------------------------------------------------------
		size_t AddUniversalJoint(const PsUniversalJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントインデックスを得る
		@param[in]	index	マルチジョイントのインデックス
		@return	ジョイントインデックス
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetJointIndex(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のジョイントインデックスのジョイントを得る
		@param[in]	index	マルチジョイントのインデックス
		@return	ジョイント
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsJoint> GetPsJoint(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@param[in]	index	マルチボディのインデックス
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetIndex(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のインデックスのオブジェクトを得る
		@param[in]	index	マルチボディのインデックス
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsObject> GetPsObject(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを得る
		@param[out]	st	ステータスを得る参照
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetStatus(PsBodyStatus& st, size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を得る
		@param[in]	index	マルチボディのインデックス
		@return	剛体の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetPosition(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の姿勢を得る
		@param[in]	index	マルチボディのインデックス
		@return	剛体の姿勢
		*/
		//--------------------------------------------------------------------------------------
		bsm::Quat	GetOrientation(size_t index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を得る
		@param[in]	index	マルチボディのインデックス
		@return	剛体の速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetLinearVelocity(size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を得る
		@param[in]	index	マルチボディのインデックス
		@return	剛体の回転速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3	GetAngularVelocity(size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを設定する
		@param[int]	st	ステータス
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStatus(const PsBodyUpdateStatus& st, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を起こす（sleepが有効の場合）
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void WakeUp(size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	登録されているすべての剛体を起こす（sleepが有効の場合）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void WakeUpAll();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを得る
		@param[in]	index	マルチボディのインデックス
		@return	重力を計算すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsAutoGravity(size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを設定する
		@param[in]	b	設定する値
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAutoGravity(bool b, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(const bsm::Float3& pos, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOrientation(const bsm::Quat& qt, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を設定する
		@param[in]	v	速度
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLinearVelocity(const bsm::Float3& v, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を設定する
		@param[in]	v	速度
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAngularVelocity(const bsm::Float3& v, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度をtimeStepでposに移動するよう設定する
		@param[in]	pos	移動位置
		@param[in]	timeStep	かかる時間
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MovePosition(const bsm::Float3 &pos, float timeStep, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度をtimeStepでqtになるよう設定する
		@param[in]	qt	目標の回転
		@param[in]	timeStep	かかる時間
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MoveOrientation(const bsm::Quat& qt, float timeStep, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のフォースを追加する
		@param[in]	v	フォース
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyForce(const bsm::Float3& v, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のトルクを追加する
		@param[in]	v	トルク
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyTorque(const bsm::Float3& v, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突セルフ衝突フィルターを設定する
		@param[in]	val	値
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterSelf(uint32_t val, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突ターゲット衝突フィルターを設定する
		@param[in]	val	値
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterTarget(uint32_t val, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプを設定する
		@param[in]	t	値
		@param[in]	index	マルチボディのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMotionType(PsMotionType t, size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプをを得る
		@param[in]	index	マルチボディのインデックス
		@return	形状数
		*/
		//--------------------------------------------------------------------------------------
		PsMotionType GetMotionType(size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手の配列(インデックス)を得る
		@param[out]	contacts	相手のIDの配列
		@param[in]	index	マルチボディのインデックス
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsVec(vector<uint16_t>& contacts, size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手のset集合を得る
		@param[out]	contacts	相手のIDのset集合
		@param[in]	index	マルチボディのインデックス
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsSet(set<uint16_t>& contacts, size_t index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	破棄されるとき
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDestroy()override;
	};


}
// end basedx12

