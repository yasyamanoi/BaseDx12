/*!
@file BaseMath.h
@brief XMMathを使うための薄いレイヤー
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/

#pragma once

#include "stdafx.h"

namespace basedx12 {

namespace bsm {

	struct Flt2;
	struct Flt3;
	struct Flt4;
	struct Quat;
	struct Mat3x3;
	struct Mat4x4;

	//--------------------------------------------------------------------------------------
	///	Flt2（2DFloat）
	//--------------------------------------------------------------------------------------
	struct Flt2 : public XMFLOAT2
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	vec	Flt2構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2(const Flt2& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(zは無視される)
		@param[in]	vec	Flt3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt2(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(z,wは無視される)
		@param[in]	vec	Flt3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt2(const Flt4& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	v	XMFLOAT2構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt2(const XMFLOAT2& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	x	X値
		@param[in]	y	Y値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2(float x, float y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（同じ値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt2(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMVECTORで初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt2(const XMVECTOR& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORへのキャスト（thisをキャストして返す）
		@return	XMVECTOR型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMVECTOR() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt2からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator =(const Flt2& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3からの代入(zは無視される)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator =(const Flt3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt4からの代入(z,wは無視される)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator =(const Flt4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT2からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator=(const XMFLOAT2& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator=(const XMVECTOR& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt2と同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Flt2& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt2と非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Flt2& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	すべてに代入
		@param[in]	val	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& setAll(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	各要素の代入
		@param[in]  _x	X
		@param[in]	_y	Y
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& set(float _x, float _y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの代入
		@param[in]	x	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& setX(float x);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの代入
		@param[in]	y	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& setY(float y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの取得
		@return	x値
		*/
		//--------------------------------------------------------------------------------------
		inline float getX()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの取得
		@return	y値
		*/
		//--------------------------------------------------------------------------------------
		inline float getY()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによるの代入
		@param[in]	idx	0=X,1=Y
		@param[in]	value	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& setElem(int idx, float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによる値の参照
		@param[in]	idx	0=X,1=Y
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の代入
		@param[in]	idx	0=X,1=Y
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float& operator [](int idx);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の参照
		@param[in]	idx	0=X,1=Y
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float operator [](int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator +(const Flt2& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator +(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator -(const Flt2& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator -(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	除算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator /(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator +=(const Flt2& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator +=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator -=(const Flt2& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator -=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator *=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追除算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& operator /=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単項マイナス
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt2 operator -() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	正規化する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& normalize();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り捨てる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& floor(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で四捨五入する
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& round(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り上げる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt2& ceil(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との内積を返す
		@param[in]	vec1	値1
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float dot(const Flt2 & vec1) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さの2乗を返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float lengthSqr() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さを返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float length() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisにNaNが含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isNaN() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisに無限大が含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isInfinite() const;

	};

	//--------------------------------------------------------------------------------------
	///	Flt3（3DFloat）
	//--------------------------------------------------------------------------------------
	struct Flt3 : public XMFLOAT3
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	vec	Flt3構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(zは0)
		@param[in]	vec	Flt2構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt3(const Flt2& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(wは無視される)
		@param[in]	vec	Flt4構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt3(const Flt4& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	v	XMFLOAT3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt3(const XMFLOAT3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	x	X値
		@param[in]	y	Y値
		@param[in]	z	Z値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（同じ値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt3(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMVECTORで初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt3(const XMVECTOR& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORへのキャスト（thisをキャストして返す）
		@return	XMVECTOR型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMVECTOR() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt2からの代入(zは0)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator =(const Flt2& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator =(const Flt3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt4からの代入(wは無視される)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator =(const Flt4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT3からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator=(const XMFLOAT3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator=(const XMVECTOR& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3と同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Flt3& other) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3と非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Flt3& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	すべてに代入
		@param[in]	val	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& setAll(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	各要素の代入
		@param[in]  _x	X
		@param[in]	_y	Y
		@param[in]	_z	Z
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& set(float _x, float _y, float _z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの代入
		@param[in]	x	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& setX(float x);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの代入
		@param[in]	y	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& setY(float y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの代入
		@param[in]	z	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& setZ(float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの取得
		@return	x値
		*/
		//--------------------------------------------------------------------------------------
		inline float getX()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの取得
		@return	y値
		*/
		//--------------------------------------------------------------------------------------
		inline float getY()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの取得
		@return	z値
		*/
		//--------------------------------------------------------------------------------------
		inline float getZ()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによるの代入
		@param[in]	idx	0=X,1=Y,2=Z
		@param[in]	value	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& setElem(int idx, float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによる値の参照
		@param[in]	idx	0=X,1=Y,2=Z
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の代入
		@param[in]	idx	0=X,1=Y,2=Z
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float& operator [](int idx);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の参照
		@param[in]	idx	0=X,1=Y,2=Z
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float operator [](int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator +(const Flt3& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator +(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator -(const Flt3& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator -(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator *(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator *(const Mat4x4 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	除算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator /(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator +=(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator +=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator -=(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator -=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator *=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator *=(const Mat3x3 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator *=(const Mat4x4 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追除算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator /=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単項マイナス
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator -() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	正規化する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& normalize();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り捨てる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& floor(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で四捨五入する
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& round(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り上げる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& ceil(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との内積を返す
		@param[in]	vec1	値1
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float dot(const Flt3 & vec1)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との外積を設定する
		@param[in]	vec1	値1
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& cross(const Flt3 & vec1);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さの2乗を返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float lengthSqr()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さを返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float length()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	反発するベクトルを設定する
		@param[in]	normal	反発に使用する法線
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& reflect(const Flt3 & normal);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スライドするベクトルを設定する
		@param[in]	normal	スライドに使用する法線
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& slide(const Flt3 & normal);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisにNaNが含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isNaN() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisに無限大が含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isInfinite() const;
	};

	//--------------------------------------------------------------------------------------
	///	Flt4（4DFloat）
	//--------------------------------------------------------------------------------------
	struct Flt4 : public XMFLOAT4
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	vec	Flt4構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4(const Flt4& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(z,wは0)
		@param[in]	vec	Flt3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt4(const Flt2& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(wは0)
		@param[in]	vec	Flt3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt4(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	vec	Flt3構造体
		@param[in]	_w	W値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4(const Flt3& vec,float _w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	v	XMFLOAT3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt4(const XMFLOAT4& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	x	X値
		@param[in]	y	Y値
		@param[in]	z	Z値
		@param[in]	w	W値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4(float x, float y, float z, float w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（同じ値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt4(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMVECTORで初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Flt4(const XMVECTOR& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORへのキャスト（thisをキャストして返す）
		@return	XMVECTOR型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMVECTOR() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3へのキャスト（thisをキャストして返す）
		@return	Flt3型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator Flt3() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt2からの代入(z,wは0になる)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator =(const Flt2& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3からの代入(wは0になる)
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator =(const Flt3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt4からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator =(const Flt4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT4からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator=(const XMFLOAT4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator=(const XMVECTOR& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt4と同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Flt4& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Flt3と非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Flt4& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	すべてに代入
		@param[in]	val	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setAll(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	各要素の代入
		@param[in]  _x	X
		@param[in]	_y	Y
		@param[in]	_z	Z
		@param[in]	_w	W
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& set(float _x, float _y, float _z, float _w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの代入
		@param[in]	x	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setX(float x);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの代入
		@param[in]	y	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setY(float y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの代入
		@param[in]	z	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setZ(float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Wの代入
		@param[in]	w	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setW(float w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの取得
		@return	x値
		*/
		//--------------------------------------------------------------------------------------
		inline float getX()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの取得
		@return	y値
		*/
		//--------------------------------------------------------------------------------------
		inline float getY()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの取得
		@return	z値
		*/
		//--------------------------------------------------------------------------------------
		inline float getZ()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Wの取得
		@return	w値
		*/
		//--------------------------------------------------------------------------------------
		inline float getW()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによるの代入
		@param[in]	idx	0=X,1=Y,2=Z,3=W
		@param[in]	value	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& setElem(int idx, float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによる値の参照
		@param[in]	idx	0=X,1=Y,2=Z,3=W
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の代入
		@param[in]	idx	0=X,1=Y,2=Z,3=W
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float& operator [](int idx);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の参照
		@param[in]	idx	0=X,1=Y,2=Z,3=W
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float operator [](int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator +(const Flt4& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator +(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator -(const Flt4& vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator -(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator *(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator *(const Mat4x4 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	除算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator /(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator +=(const Flt4& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator +=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	vec	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator -=(const Flt4& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator -=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator *=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator *=(const Mat3x3 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算
		@param[in]	mat	行列
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator *=(const Mat4x4 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追除算
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator /=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単項マイナス
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator -() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	正規化する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& normalize();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り捨てる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& floor(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で四捨五入する
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& round(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の少数点以下の桁数で切り上げる
		@param[in]	len	桁数
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& ceil(int len);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との内積を返す
		@param[in]	vec1	値1
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float dot(const Flt4 & vec1)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さの2乗を返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float lengthSqr()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの長さを返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float length()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisにNaNが含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isNaN() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisに無限大が含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isInfinite() const;
	};



	//--------------------------------------------------------------------------------------
	///	Quat（クオータニオン）
	//--------------------------------------------------------------------------------------
	struct Quat : public XMFLOAT4
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Quat();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	quat	Quat構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Quat(const Quat& quat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	v	XMFLOAT3構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Quat(const XMFLOAT4& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	x	X値
		@param[in]	y	Y値
		@param[in]	z	Z値
		@param[in]	w	W値
		*/
		//--------------------------------------------------------------------------------------
		inline Quat(float x, float y, float z, float w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	vec	回転軸(Flt3)
		@param[in]	r	回転角度（ラジアン）
		*/
		//--------------------------------------------------------------------------------------
		inline Quat(const Flt3& vec, float r);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（同じ値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Quat(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMVECTORで初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Quat(const XMVECTOR& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（Mat3x3で初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Quat(const Mat3x3& m);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（Mat4x4で初期化）
		@param[in]	vec	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Quat(const Mat4x4& m);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORへのキャスト（thisをキャストして返す）
		@return	XMVECTOR型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMVECTOR() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Quatからの代入
		@param[in]	quat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& operator =(const Quat& quat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT4からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& operator=(const XMFLOAT4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMVECTORからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& operator=(const XMVECTOR& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Quatと同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Quat& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Quatと非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Quat& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XYZの代入
		@param[in]	vec	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat & setXYZ(const Flt3& vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XYZの取得
		@return	XYZのの値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getXYZ() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの代入
		@param[in]	x	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& setX(float x);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの代入
		@param[in]	y	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& setY(float y);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの代入
		@param[in]	z	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& setZ(float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Wの代入
		@param[in]	w	相手の値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& setW(float w);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Xの取得
		@return	x値
		*/
		//--------------------------------------------------------------------------------------
		inline float getX()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Yの取得
		@return	y値
		*/
		//--------------------------------------------------------------------------------------
		inline float getY()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Zの取得
		@return	z値
		*/
		//--------------------------------------------------------------------------------------
		inline float getZ()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Wの取得
		@return	w値
		*/
		//--------------------------------------------------------------------------------------
		inline float getW()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによるの代入
		@param[in]	idx	0=X,1=Y,2=Z,3=w
		@param[in]	value	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& setElem(int idx, float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスによる値の参照
		@param[in]	idx	0=X,1=Y,2=Z,3=w
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の代入
		@param[in]	idx	0=X,1=Y,2=Z,3=w
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float& operator [](int idx);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	[]による値の参照
		@param[in]	idx	0=X,1=Y,2=Z
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float operator [](int idx) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	quat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Quat operator +(const Quat& quat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	quat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Quat operator -(const Quat& quat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算
		@param[in]	quat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Quat operator *(const Quat& quat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算(float)
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Quat operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算（Quat）
		@param[in]	quat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& operator *=(const Quat& quat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	正規化する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& normalize();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との内積を返す
		@param[in]	quat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline float dot(const Quat& quat)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	相手との共役を返す
		@param[in]	quat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& conj(const Quat& quat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単位クオータニオンを設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline  Quat& identity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	X軸回転のクオータニオンを設定する
		@param[in]	radians 回転値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& rotationX(float radians);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Y軸回転のクオータニオンを設定する
		@param[in]	radians 回転値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& rotationY(float radians);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Z軸回転のクオータニオンを設定する
		@param[in]	radians 回転値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat&  rotationZ(float radians);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の軸回転のクオータニオンを設定する
		@param[in]	radians 回転値
		@param[in]	unitVec 回転軸
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& rotation(float radians, const Flt3& unitVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の軸回転のクオータニオンを設定する(引数が逆バージョン)
		@param[in]	unitVec 回転軸
		@param[in]	radians 回転値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& rotation(const Flt3& unitVec, float radians);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	回転ベクトルからクオータニオンを設定する
		@param[in]	rotVec 回転ベクトル
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& rotationRollPitchYawFromVector(const Flt3& rotVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	クォータニオンを回転ベクトルに変換して返す
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 toRotVec() const;

		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisの逆クォータニオンを設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& inverse();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した法線の方向を向く回転を設定する
		@param[in]	norm 法線
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& facing(const Flt3& norm);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した法線のY軸のみ方向を向く回転を設定する
		@param[in]	norm 法線
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat& facingY(const Flt3& norm);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisにNaNが含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isNaN() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	*thisに無限大が含まれるかどうかを返す
		@return	含まれていたらtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool isInfinite() const;
	};


	//--------------------------------------------------------------------------------------
	///	Mat3x3 (「Major」優先の3x3行列)
	//--------------------------------------------------------------------------------------
	struct Mat3x3 : public XMFLOAT3X3
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	mat	Mat3x3構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3(const Mat3x3& mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(major)
		@param[in]	major0	Majorの0番目
		@param[in]	major1	Majorの1番目
		@param[in]	major2	Majorの2番目
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3(const Flt3& major0, const Flt3& major1, const Flt3& major2);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(Quat)
		@param[in]	unitQuat	クオータニオン
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat3x3(const Quat& unitQuat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（すべて値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat3x3(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMFLOAT3X3で初期化）
		@param[in]	other	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat3x3(const XMFLOAT3X3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMMATRIXで初期化）
		@param[in]	other	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat3x3(const XMMATRIX& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMMATRIXへのキャスト（thisをキャストして返す）
		@return	XMMATRIX型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMMATRIX() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat3x3からの代入
		@param[in]	mat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator =(const Mat3x3& mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT3X3からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator=(const XMFLOAT3X3& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMMATRIXからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator=(const XMMATRIX& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat3x3と同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Mat3x3& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat3x3と非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Mat3x3& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの0番目の代入
		@param[in]	major0	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& setMajor0(const Flt3 & major0);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの1番目の代入
		@param[in]	major1	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& setMajor1(const Flt3 & major1);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの2番目の代入
		@param[in]	major2	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& setMajor2(const Flt3 & major2);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの0番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getMajor0() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの1番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getMajor1() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの2番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getMajor2() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの設定
		@param[in]	major	Majorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3 & setMajor(int major, const Flt3 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMinorの設定
		@param[in]	minor	Minorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3 & setMinor(int minor, const Flt3 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの取得
		@param[in]	major	Majorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getMajor(int major) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMinorの取得
		@param[in]	minor	Minorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getMinor(int minor) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの設定、[]で指定
		@param[in]	major	Majorの番号
		@return	値の参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3& operator [](int major);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの参照、[]で指定
		@param[in]	major	Majorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator [](int major) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の行、列に値の設定
		@param[in]	major	Majorの番号
		@param[in]	minor	Minorの番号
		@param[in]	val	設定する値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& setElem(int major, int minor, float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の行、列に値の取得
		@param[in]	major	Majorの番号
		@param[in]	minor	Minorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int major, int minor) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 operator +(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 operator -(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単項マイナス
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 operator -() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Flt3）
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator *(const Flt3 & vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 operator *(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	mat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator +=(const Mat3x3 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	mat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator -=(const Mat3x3 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算（float）
		@param[in]	val	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator *=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算（Mat3x3）
		@param[in]	mat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& operator *=(const Mat3x3 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単位行列を設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3&  identity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スケーリング行列を設定する
		@param[in]	scaleVec	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& scale(const Flt3 & scaleVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	クオータニオンによる回転行列を設定する
		@param[in]	unitQuat	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& rotation(const Quat & unitQuat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	転置する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& transpose();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	逆行列を設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& inverse();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	クロス行列を作成する
		@param[in]	vec	元になる値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat3x3& crossMatrix(const Flt3 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のX軸傾きを取得する。
		@return	X軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotXInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のY軸傾きを取得する。
		@return	Y軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotYInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のZ軸傾きを取得する。
		@return	Z軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotZInMatrix()const;
	};

	//--------------------------------------------------------------------------------------
	///	Mat4x4 (「Major」優先の4x4行列)
	//--------------------------------------------------------------------------------------
	struct Mat4x4 : public XMFLOAT4X4
	{
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	mat	Mat4x4構造体
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4(const Mat4x4& mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	mat	Mat4x4構造体
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat4x4(const Mat3x3& mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(major)
		@param[in]	major0	Majorの0番目
		@param[in]	major1	Majorの1番目
		@param[in]	major2	Majorの2番目
		@param[in]	major3	Majorの3番目
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4(const Flt3& major0, const Flt3& major1, const Flt3& major2, const Flt3& major3);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(major)
		@param[in]	major0	Majorの0番目
		@param[in]	major1	Majorの1番目
		@param[in]	major2	Majorの2番目
		@param[in]	major3	Majorの3番目
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4(const Flt4& major0, const Flt4& major1, const Flt4& major2, const Flt4& major3);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(3x3行列と位置)
		@param[in]	tfrm	3x3行列
		@param[in]	translateVec	位置
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4(const Mat3x3 & tfrm, const Flt3 & translateVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(Quatと位置)
		@param[in]	unitQuat	Quat
		@param[in]	translateVec	位置
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4(const Quat & unitQuat, const Flt3 & translateVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ(Quat)
		@param[in]	unitQuat	クオータニオン
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat4x4(const Quat& unitQuat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（すべて値に初期化）
		@param[in]	val	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat4x4(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMFLOAT4X4で初期化）
		@param[in]	other	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat4x4(const XMFLOAT4X4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ（XMMATRIXで初期化）
		@param[in]	other	値
		*/
		//--------------------------------------------------------------------------------------
		explicit inline Mat4x4(const XMMATRIX& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMMATRIXへのキャスト（thisをキャストして返す）
		@return	XMMATRIX型の値
		*/
		//--------------------------------------------------------------------------------------
		inline operator XMMATRIX() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat4x4からの代入
		@param[in]	mat	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& operator =(const Mat4x4& mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMFLOAT4X4からの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& operator=(const XMFLOAT4X4& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XMMATRIXからの代入
		@param[in]	other	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& operator=(const XMMATRIX& other);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat4x4と同値チェック
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator==(const Mat4x4& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat4x4と非同値チェック
		@param[in]	other	相手
		@return	非同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool operator!=(const Mat4x4& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat4x4と同値チェック(UINTで判断)
		@param[in]	other	相手
		@return	同値ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool equalInt(const Mat4x4& other)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Mat4x4と近似チェック
		@param[in]	other	相手
		@param[in]	epsilon	近似制限値
		@return	近似ならtrue
		*/
		//--------------------------------------------------------------------------------------
		inline bool nearEqual(const Mat4x4& other,float epsilon)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	3x3の部分にセット
		@param[in]	mat3	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setUpper3x3(const Mat3x3 & mat3);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	3x3の部分を取得
		@return	3x3の部分
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat3x3 getUpper3x3() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	位置の部分にセット
		@param[in]	translateVec	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setTranslation(const Flt3 & translateVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	位置の部分を取得
		@return	位置の部分
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 getTranslation() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの0番目の代入
		@param[in]	major0	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor0(const Flt3 & major0);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの1番目の代入
		@param[in]	major1	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor1(const Flt3 & major1);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの2番目の代入
		@param[in]	major2	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor2(const Flt3 & major2);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの3番目の代入
		@param[in]	major3	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor3(const Flt3 & major3);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの0番目の代入
		@param[in]	major0	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor0(const Flt4 & major0);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの1番目の代入
		@param[in]	major1	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor1(const Flt4 & major1);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの2番目の代入
		@param[in]	major2	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor2(const Flt4 & major2);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの3番目の代入
		@param[in]	major3	相手
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setMajor3(const Flt4 & major3);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの0番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMajor0() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの1番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMajor1() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの2番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMajor2() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Majorの3番目の取得
		@return	指定の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMajor3() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの設定
		@param[in]	major	Majorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setMajor(int major, const Flt3 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの設定
		@param[in]	major	Majorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setMajor(int major, const Flt4 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMinorの設定
		@param[in]	minor	Minorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setMinor(int minor, const Flt3 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMinorの設定
		@param[in]	minor	Minorの番号
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & setMinor(int minor, const Flt4 & vec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの取得
		@param[in]	major	Majorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMajor(int major) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMinorの取得
		@param[in]	minor	Minorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 getMinor(int minor) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの設定、[]で指定
		@param[in]	major	Majorの番号
		@return	値の参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt4& operator [](int major);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のMajorの参照、[]で指定
		@param[in]	major	Majorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator [](int major) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の行、列に値の設定
		@param[in]	major	Majorの番号
		@param[in]	minor	Minorの番号
		@param[in]	val	設定する値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& setElem(int major, int minor, float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定の行、列に値の取得
		@param[in]	major	Majorの番号
		@param[in]	minor	Minorの番号
		@return	値
		*/
		//--------------------------------------------------------------------------------------
		inline float getElem(int major, int minor) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	加算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator +(const Mat4x4 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator -(const Mat4x4 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単項マイナス
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator -() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator *(float val) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Flt3）
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt3 operator *(const Flt3 & vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Flt4）
		@param[in]	vec	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Flt4 operator *(const Flt4 & vec) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat3x3）
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator *(const Mat3x3 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	乗算（Mat4x4）
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline const Mat4x4 operator *(const Mat4x4 & mat) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追加算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & operator +=(const Mat4x4 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追減算
		@param[in]	mat	相手
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & operator -=(const Mat4x4 & mat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	追乗算（float）
		@param[in]	val	値
		@return	演算後の値
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& operator *=(float val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	変換行列の追加乗算
		@param[in]	tfrm	追加変換する値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & operator *=(const Mat4x4 & tfrm);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	変換行列の追加乗算(Mat3x3)
		@param[in]	tfrm	追加変換する値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4 & operator *=(const Mat3x3 & tfrm);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行列から各値を取り出す（例外の場合あり）
		@param[in]	tfrm	追加変換する値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		inline void decompose(Flt3& rScaling, Quat& rQt, Flt3& rTranslation)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行列からスケーリングを取り出す（例外の場合あり）
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3 scaleInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行列からクォータニオンを取り出す（例外の場合あり）
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Quat quatInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行列から平行移動を取り出す
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Flt3 transInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単位行列を設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4&  identity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の行列をスケーリング1.0に設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4&  scaleIdentity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スケーリング行列を設定する
		@param[in]	scaleVec	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& scale(const Flt3 & scaleVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	クオータニオンによる回転行列を設定する
		@param[in]	unitQuat	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& rotation(const Quat & unitQuat);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ベクトルによる移動行列を設定する
		@param[in]	transVec	値
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& translation(const Flt3 & transVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	転置する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& transpose();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	逆行列を設定する
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& inverse();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	2Dアフィン変換を実装する
		@param[in]	scaleVec　スケーリング
		@param[in]	rotOrigin　回転の中心
		@param[in]	rotation	回転値（ラジアン）
		@param[in]	transVec	移動
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& affineTransformation2D(
			const Flt2 & scaleVec,
			const Flt2 & rotOrigin,
			const float & rotation,
			const Flt2 & transVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アフィン変換を実装する
		@param[in]	scaleVec　スケーリング
		@param[in]	rotOrigin　回転の中心
		@param[in]	unitQuat	クォータニオン
		@param[in]	transVec	移動
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& affineTransformation(
			const Flt3 & scaleVec,
			const Flt3 & rotOrigin,
			const Quat & unitQuat,
			const Flt3 & transVec);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	アフィン変換を実装する(回転がベクトル)
		@param[in]	scaleVec　スケーリング
		@param[in]	rotOrigin　回転の中心
		@param[in]	rotVec	回転ベクトル
		@param[in]	transVec	移動
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& affineTransformation(
			const Flt3 & scaleVec,
			const Flt3 & rotOrigin,
			const Flt3 & rotVec,
			const Flt3 & transVec);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	LookAtLHビュー行列を作成する
		@param[in]	eye　カメラ位置
		@param[in]	at　カメラ視点
		@param[in]	up	カメラ向き
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& lookatLH(
			const Flt3 & eye,
			const Flt3 & at,
			const Flt3 & up);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	OrthographicLH射影行列を作成する
		@param[in]	width　幅
		@param[in]	height　高さ
		@param[in]	n	手前
		@param[in]	f	 奥
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& orthographicLH(
			float width,
			float height,
			float n,
			float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	str変換(Scele,translation,rotation)を実装する
		@param[in]	scaleVec　スケーリング
		@param[in]	transVec	移動
		@param[in]	unitQuat	クォータニオン
		@return	*thisの参照
		*/
		//--------------------------------------------------------------------------------------
		inline Mat4x4& strTransformation(
			const Flt3 & scaleVec,
			const Flt3 & transVec,
			const Quat & unitQuat
		);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のX軸傾きを取得する。スケーリングに0があった場合近似値になる
		@return	X軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotXInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のY軸傾きを取得する。スケーリングに0があった場合近似値になる
		@return	Y軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotYInMatrix()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	this行列内のZ軸傾きを取得する。スケーリングに0があった場合近似値になる
		@return	Z軸の傾き
		*/
		//--------------------------------------------------------------------------------------
		Flt3 rotZInMatrix()const;
	};
	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群float
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	指定の少数点以下の桁数で切り捨てる
	@param[in]	f	元になる値
	@param[in]	len	桁数
	@return	*thisの参照
	*/
	//--------------------------------------------------------------------------------------
	inline float floor(float f,int len);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	指定の少数点以下の桁数で四捨五入する
	@param[in]	f	元になる値
	@param[in]	len	桁数
	@return	*thisの参照
	*/
	//--------------------------------------------------------------------------------------
	inline float round(float f, int len);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	指定の少数点以下の桁数で切り上げる
	@param[in]	f	元になる値
	@param[in]	len	桁数
	@return	*thisの参照
	*/
	//--------------------------------------------------------------------------------------
	inline float ceil(float f, int len);
	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Flt2
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の各要素を乗算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 operator *(float val, const Flt2 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の各要素を除算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 operator /(float val, const Flt2 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の各要素を乗算する（Flt2）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 mulPerElem(const Flt2 & vec0, const Flt2 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の各要素を除算する（Flt2）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 divPerElem(const Flt2 & vec0, const Flt2 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の各要素を絶対値にする（Flt2）
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 absPerElem(const Flt2 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2同士の各要素の大きいほうの値でFlt2を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 maxPerElem(const Flt2 & vec0, const Flt2 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2同士の各要素の小さいほうの値でFlt2を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 minPerElem(const Flt2 & vec0, const Flt2 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2同士の内積を返す
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float dot(const Flt2 & vec0, const Flt2 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の長さの2乗を返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float lengthSqr(const Flt2 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt2の長さを返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float length(const Flt2 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	正規化する
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt2 normalize(const Flt2 & vec);

	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Flt3
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の各要素を乗算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 operator *(float val, const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の各要素を除算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 operator /(float val, const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の各要素を乗算する（Flt3）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 mulPerElem(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の各要素を除算する（Flt3）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 divPerElem(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の各要素を絶対値にする（Flt3）
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 absPerElem(const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3同士の各要素の大きいほうの値でFlt3を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 maxPerElem(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3同士の各要素の小さいほうの値でFlt3を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 minPerElem(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3同士の内積を返す
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float dot(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3同士の外積を返す
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 cross(const Flt3 & vec0, const Flt3 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の長さの2乗を返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float lengthSqr(const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3の長さを返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float length(const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	正規化する
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 normalize(const Flt3 & vec);

	//--------------------------------------------------------------------------------------
	/*!
	@brief	反発するベクトルを設定する
	@param[in]	vec	元になる値
	@param[in]	normal	反発に使用する法線
	@return	*thisの参照
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 reflect(const Flt3 & vec,const Flt3 & normal);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	スライドするベクトルを得る
	@param[in]	vec	元になる値
	@param[in]	normal	スライドに使用する法線
	@return	スライドするベクトル
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 slide(const Flt3 & vec, const Flt3 & normal);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	一番大きな要素を返す
	@param[in]	vec	元になる値
	@return	一番大きな要素
	*/
	//--------------------------------------------------------------------------------------
	inline float maxElem(const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	一番小さな要素を返す
	@param[in]	vec	元になる値
	@return	一番小さな要素
	*/
	//--------------------------------------------------------------------------------------
	inline float minElem(const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	ベクトル間の角度を得る
	@param[in]	norm11	１つ目の法線
	@param[in]	norm12	２つ目の法線
	@return	*thisの参照
	*/
	//--------------------------------------------------------------------------------------
	inline float angleBetweenNormals(const Flt3 & norm11, const Flt3 & norm2);
	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Flt4
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の各要素を乗算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 operator *(float val, const Flt4 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の各要素を除算する（float）
	@param[in]	val	演算する値
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 operator /(float val, const Flt4 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の各要素を乗算する（Flt4）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 mulPerElem(const Flt4 & vec0, const Flt4 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の各要素を除算する（Flt4）
	@param[in]	vec0	元になる値
	@param[in]	vec1	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 divPerElem(const Flt4 & vec0, const Flt4 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の各要素を絶対値にする（Flt4）
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 absPerElem(const Flt4 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4同士の各要素の大きいほうの値でFlt4を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 maxPerElem(const Flt4 & vec0, const Flt4 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4同士の各要素の小さいほうの値でFlt4を作成する
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 minPerElem(const Flt4 & vec0, const Flt4 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4同士の内積を返す
	@param[in]	vec0	値0
	@param[in]	vec1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float dot(const Flt4 & vec0, const Flt4 & vec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の長さの2乗を返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float lengthSqr(const Flt4 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt4の長さを返す
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float length(const Flt4 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	正規化する
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt4 normalize(const Flt4 & vec);

	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Quat関連
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3をQuatで回転する
	@param[in]	vec	演算する値
	@param[in]	unitQuat	回転する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Flt3 rotate(const Quat & unitQuat, const Flt3 & vec);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Flt3二つでQuatを作成する
	@param[in]	unitVec0	回転1
	@param[in]	unitVec1	回転2
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat rotation(const Flt3 & unitVec0, const Flt3 & unitVec1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	正規化する
	@param[in]	quat	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat normalize(const Quat & quat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	Quat同士の内積を返す
	@param[in]	quat0	値0
	@param[in]	quat1	値1
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline float dot(const Quat& quat0, const Quat& quat1);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	共役を得る
	@param[in]	quat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat conj(const Quat & quat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	逆クォータニオンを得る
	@param[in]	quat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat inverse(const Quat & quat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	指定した法線の方向を向く回転を得る
	@param[in]	norm 法線
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat facing(const Flt3& norm);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	指定した法線のY軸のみ方向を向く回転を設定する
	@param[in]	norm 法線
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Quat facingY(const Flt3& norm);
	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Mat3x3関連
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列に値を乗算する（float）
	@param[in]	vec	演算する値
	@param[in]	mat	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat3x3 operator *(float val, const Mat3x3 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列に値を絶対値にする
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat3x3 absPerElem(const Mat3x3 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列を転置する
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat3x3 transpose(const Mat3x3 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	逆行列を得る
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat3x3 inverse(const Mat3x3 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	クロス行列を作成する
	@param[in]	vec	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat3x3 crossMatrix(const Flt3 & vec);

	//--------------------------------------------------------------------------------------
	///	ユーティリティ関数群Mat4x4関連
	//--------------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列に値を乗算する（float）
	@param[in]	vec	演算する値
	@param[in]	mat	元になる値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat4x4 operator *(float val, const Mat4x4 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列に値を絶対値にする
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat4x4 absPerElem(const Mat4x4 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	行列を転置する
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat4x4 transpose(const Mat4x4 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	逆行列を得る
	@param[in]	mat	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat4x4 inverse(const Mat4x4 & mat);
	//--------------------------------------------------------------------------------------
	/*!
	@brief	逆平行行列を得る
	@param[in]	tfrm	演算する値
	@return	演算後の値
	*/
	//--------------------------------------------------------------------------------------
	inline const Mat4x4 orthoInverse(const Mat4x4 & tfrm);

}
//end bsm
}
//end basedx12
#include "BaseMathInc.h"


