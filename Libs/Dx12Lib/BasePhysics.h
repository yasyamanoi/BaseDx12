/*!
@file BasePhysics.h
@brief 物理計算インターファイス
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/

#pragma once

namespace basedx12 {

	//--------------------------------------------------------------------------------------
	///	モーションタイプ
	//--------------------------------------------------------------------------------------
	enum class PsMotionType {
		MotionTypeFixed = 0,
		MotionTypeActive,
		MotionTypeKeyframe,
		MotionTypeOneWay,
		MotionTypeTrigger,
		MotionTypeCount
	};

	//--------------------------------------------------------------------------------------
	///	オブジェクト作成パラメータの親
	//--------------------------------------------------------------------------------------
	struct PsParam {
		PsMotionType m_MotionType;
		bsm::Quat m_Quat;
		bsm::Float3 m_Pos;
		bsm::Float3 m_LinearVelocity;
		bsm::Float3 m_AngularVelocity;
		bool m_UseSleep;
		float m_Mass;
		//慣性テンソル
		bsm::Mat3x3 m_Inertia;
		float m_Restitution;
		float  m_Friction;
		//衝突判定制御
		uint32_t m_ContactFilterSelf;
		uint32_t m_ContactFilterTarget;
		//オフセット値
		bsm::Quat m_OffsetOrientation;
		bsm::Float3 m_OffsetPosition;
		PsParam() :
			m_Quat(),
			m_Pos(0),
			m_LinearVelocity(0),
			m_AngularVelocity(0),
			m_UseSleep(true),
			m_Mass(0.0f),
			m_Inertia(),
			m_Restitution(0.2f),
			m_Friction(0.6f),
			m_ContactFilterSelf(0xffffffff),
			m_ContactFilterTarget(0xffffffff),
			m_OffsetOrientation(),
			m_OffsetPosition(0.0f)
		{
			m_Quat.identity();
			m_OffsetOrientation.identity();
		}
	};

	//--------------------------------------------------------------------------------------
	///	形状のタイプ(単体ボディのみ)
	//--------------------------------------------------------------------------------------
	enum class PsShapeType {
		Sphere,
		Box,
		Capsule,
		Cylinder,
		Convex,
		Unsupported
	};

	//--------------------------------------------------------------------------------------
	///	剛体のステータス(取得用)
	//--------------------------------------------------------------------------------------
	struct PsBodyStatus {
		bsm::Float3	m_Position;
		bsm::Quat	m_Orientation;
		bsm::Float3	m_LinearVelocity;
		bsm::Float3	m_AngularVelocity;
	};

	//--------------------------------------------------------------------------------------
	///	剛体のステータス(設定用)
	//--------------------------------------------------------------------------------------
	struct PsBodyUpdateStatus {
		bsm::Float3	m_Force;
		bsm::Float3	m_Torque;
		bsm::Float3	m_LinearVelocity;
		bsm::Float3	m_AngularVelocity;
		PsBodyUpdateStatus():
			m_Force(0.0f),
			m_Torque(0.0f),
			m_LinearVelocity(0.0f),
			m_AngularVelocity(0.0f)
		{}
		PsBodyUpdateStatus(const PsBodyStatus& src) :
			m_Force(0.0f),
			m_Torque(0.0f),
			m_LinearVelocity(src.m_LinearVelocity),
			m_AngularVelocity(src.m_AngularVelocity)
		{}
	};



	//--------------------------------------------------------------------------------------
	///	物理オブジェクトの親
	//--------------------------------------------------------------------------------------
	class PsObject : public ObjectInterface {
	protected:
		/// 剛体インデックス
		uint16_t m_Index;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsObject();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsObject();
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化時のStatusの設定
		@param[in]	param	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParamStatus(const PsParam& param);
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスの取得
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetIndex() const {
			return m_Index;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const {
			return PsShapeType::Unsupported;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステートを得る
		@param[in]	body_index	ボディID
		@return　剛体のステートの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxRigidState& getPfxRigidState() const;
		sce::PhysicsEffects::PfxRigidState& getPfxRigidState();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を得る
		@param[in]	body_index	ボディID
		@return　剛体の参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxRigidBody& getPfxRigidBody() const;
		sce::PhysicsEffects::PfxRigidBody& getPfxRigidBody();
		//仮想関数
		virtual void OnUpdate()override {}
		virtual void OnDraw()override {}
		virtual void OnDestroy()override {}
	};

	//--------------------------------------------------------------------------------------
	///	ボックス作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsBoxParam : public PsParam {
		bsm::Float3 m_HalfSize;
		PsBoxParam() :
			m_HalfSize(1.0f)
		{}
		PsBoxParam(const bsm::Mat4x4& mat,
			float mass, bool UseSleep, PsMotionType mtype);
	};

	//--------------------------------------------------------------------------------------
	///	ボックス物理オブジェクト
	//--------------------------------------------------------------------------------------
	class PsBox : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsBox(const PsBoxParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsBox();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsBoxParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Box;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	球体作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsSphereParam : public PsParam {
		float m_Radius;
		PsSphereParam() :
			m_Radius(1.0f)
		{}
		PsSphereParam(const bsm::Mat4x4& mat,
			float mass, bool UseSleep, PsMotionType mtype);
	};

	//--------------------------------------------------------------------------------------
	///	球体物理オブジェクト
	//--------------------------------------------------------------------------------------
	class PsSphere : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsSphere(const PsSphereParam& param,uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsSphere();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsSphereParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Sphere;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	カプセル作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsCapsuleParam : public PsParam {
		float m_HalfLen;
		float m_Radius;
		PsCapsuleParam() :
			m_HalfLen(0.5f),
			m_Radius(0.5f)
		{}
	};

	//--------------------------------------------------------------------------------------
	///	カプセル物理オブジェクト
	//--------------------------------------------------------------------------------------
	class PsCapsule : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCapsule(const PsCapsuleParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCapsule();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCapsuleParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Capsule;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	シリンダー作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsCylinderParam : public PsParam {
		float m_HalfLen;
		float m_Radius;
		PsCylinderParam() :
			m_HalfLen(0.5f),
			m_Radius(0.5f)
		{}
	};

	//--------------------------------------------------------------------------------------
	///	シリンダー物理オブジェクト
	//--------------------------------------------------------------------------------------
	class PsCylinder : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCylinder(const PsCylinderParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCylinder();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCylinderParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Cylinder;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	ConvexMeshリソース
	//--------------------------------------------------------------------------------------
	class PsConvexMeshResource : public ObjectInterface {
		friend class ObjectFactory;
		//コンストラクタは直接呼び出せない
		PsConvexMeshResource(vector<VertexPositionNormalTexture>& vertices, vector<uint16_t>& indices);
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PsConvexMeshResourceの作成
		@param[in]	vertices	頂点の配列
		@param[in]	indices	インデックスの配列
		@return	作成されたスマートポインタ
		*/
		//--------------------------------------------------------------------------------------
		static shared_ptr<PsConvexMeshResource> CreateMeshResource(vector<VertexPositionNormalTexture>& vertices, vector<uint16_t>& indices);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsConvexMeshResource();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュインデックスの取得
		@return	メッシュインデックス
		*/
		//--------------------------------------------------------------------------------------
		uint32_t GetMeshIndex() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	バックアップされている頂点の取得
		@return	バックアップされている頂点
		*/
		//--------------------------------------------------------------------------------------
		const vector<VertexPositionNormalTexture>& GetVertices() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	バックアップされているインデックスの取得
		@return	バックアップされているインデックス
		*/
		//--------------------------------------------------------------------------------------
		const vector<uint16_t>& GetIndices() const;
		virtual void OnInit()override {}
		virtual void OnUpdate()override {}
		virtual void OnDraw()override {}
		virtual void OnDestroy()override {}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	凸面作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsConvexParam : public PsParam {
		shared_ptr<PsConvexMeshResource> m_ConvexMeshResource;
	};

	//--------------------------------------------------------------------------------------
	///	凸面物理オブジェクト(頂点指定のオブジェクト)
	//--------------------------------------------------------------------------------------
	class PsConvex : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsConvex(const PsConvexParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsConvex();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsConvexParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Convex;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	プリミティブ合成作成のタイプ
	//--------------------------------------------------------------------------------------
	enum class PsCombinedType {
		TypeSphere = 0,
		TypeBox,
		TypeCapsule,
		TypeCylinder,
		TypeConvex,
	};

	//--------------------------------------------------------------------------------------
	///	プリミティブ合成作成のプリミティブ
	//--------------------------------------------------------------------------------------
	struct PsCombinedPrimitive {
		//タイプ
		PsCombinedType m_CombinedType;
		//Boxで使用サイズ
		bsm::Float3 m_HalfSize;
		//Sphere,Capsule,Cylinderで使う半径
		float m_Radius;
		//Capsule,Cylinderで使う半分の長さ
		float m_HalfLen;
		//Convexで使うリソース
		shared_ptr<PsConvexMeshResource> m_ConvexMeshResource;
		//オフセット回転
		bsm::Quat m_OffsetOrientation;
		//オフセット位置
		bsm::Float3 m_OffsetPosition;
		PsCombinedPrimitive():
			m_CombinedType(PsCombinedType::TypeSphere),
			m_HalfSize(bsm::Float3(0.5f,0.5f,0.5f)),
			m_Radius(0.5f),
			m_HalfLen(0.5f),
			m_ConvexMeshResource(nullptr),
			m_OffsetOrientation(bsm::Quat()),
			m_OffsetPosition(0.0f)
		{}
		void reset() {
			m_CombinedType = PsCombinedType::TypeSphere;
			m_HalfSize = bsm::Float3(0.5f, 0.5f, 0.5f);
			m_Radius = 0.5f;
			m_HalfLen = 0.5f;
			m_ConvexMeshResource = nullptr;
			m_OffsetOrientation = bsm::Quat();
			m_OffsetPosition = bsm::Float3(0.0f);
		}
	};

	//--------------------------------------------------------------------------------------
	///	プリミティブ合成作成のパラメータ
	//--------------------------------------------------------------------------------------
	struct PsCombinedParam : public PsParam {
		vector<PsCombinedPrimitive> m_Primitives;
		PsCombinedParam()
		{}
		void AddPrim(const PsCombinedPrimitive& prim) {
			m_Primitives.push_back(prim);
		}
	};


	//--------------------------------------------------------------------------------------
	///	プリミティブ合成物理オブジェクト
	//--------------------------------------------------------------------------------------
	class PsCombined : public PsObject {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCombined(const PsCombinedParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCombined();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCombinedParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 単体形状の場合の形状を得る
		@return	形状(PsCombinedは単体ではないので未対応)
		*/
		//--------------------------------------------------------------------------------------
		virtual PsShapeType GetShapeType() const override {
			return PsShapeType::Unsupported;
		}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};



	//--------------------------------------------------------------------------------------
	///	ジョイントパラメータの親
	//--------------------------------------------------------------------------------------
	struct PsJointParam {
		bsm::Float3 m_AnchorPoint;
		uint16_t m_IndexA;
		uint16_t m_IndexB;
		PsJointParam():
			m_AnchorPoint(0.0f),
			m_IndexA(0),
			m_IndexB(0)
		{}
	};


	//--------------------------------------------------------------------------------------
	///	ジョイントの親
	//--------------------------------------------------------------------------------------
	class PsJoint : public ObjectInterface {
	protected:
		/// ジョイントインデックス
		uint16_t m_Index;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		PsJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントの更新
		@param[in]	IndexA	剛体Aのインデックス
		@param[in]	IndexB	剛体Bのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void UpdateJointPairs(uint16_t IndexA, uint16_t IndexB);
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Pfxジョイントを得る
		@return　Pfxジョイントの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxJoint& getPfxJoint() const;
		sce::PhysicsEffects::PfxJoint& getPfxJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントインデックスの取得
		@return	ジョイントインデックス
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetIndex() const {
			return m_Index;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効かどうか
		@return	有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsActive() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b) = 0;
		//仮想関数
		virtual void OnUpdate()override {}
		virtual void OnDraw()override {}
		virtual void OnDestroy()override {}
	};

	//--------------------------------------------------------------------------------------
	///	ボールジョイントパラメータ(内容は親クラスと同じ)
	//--------------------------------------------------------------------------------------
	struct PsBallJointParam : public PsJointParam {
		PsBallJointParam() :
			PsJointParam()
		{}
	};

	//--------------------------------------------------------------------------------------
	///	ボールジョイント
	//--------------------------------------------------------------------------------------
	class PsBallJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsBallJoint(const PsBallJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsBallJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsBallJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	球関節ジョイントパラメータ
	//--------------------------------------------------------------------------------------
	struct PsSwingTwistJointParam : public PsJointParam {
		bsm::Float3 m_TwistAxis;
		float m_TwistLowerAngle;
		float m_TwistUpperAngle;
		float m_SwingLowerAngle;
		float m_SwingUpperAngle;
		PsSwingTwistJointParam() :
			PsJointParam(),
			m_TwistAxis(0.0f, 0.0f, 1.0f),
			m_TwistLowerAngle(-0.26f),
			m_TwistUpperAngle(0.26f),
			m_SwingLowerAngle(0.0f),
			m_SwingUpperAngle(0.7f)
		{}
	};


	//--------------------------------------------------------------------------------------
	///	球関節ジョイント
	//--------------------------------------------------------------------------------------
	class PsSwingTwistJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsSwingTwistJoint(const PsSwingTwistJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsSwingTwistJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsSwingTwistJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	蝶番(ちょうつがい)ジョイントパラメータ
	//--------------------------------------------------------------------------------------
	struct PsHingeJointParam : public PsJointParam {
		bsm::Float3 m_Axis;
		float m_LowerAngle;
		float m_UpperAngle;
		PsHingeJointParam() :
			PsJointParam(),
			m_Axis(1.0f, 0.0f, 0.0f),
			m_LowerAngle(0.0f),
			m_UpperAngle(0.0f)
		{}
	};



	//--------------------------------------------------------------------------------------
	///	蝶番(ちょうつがい)ジョイント
	//--------------------------------------------------------------------------------------
	class PsHingeJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsHingeJoint(const PsHingeJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsHingeJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsHingeJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	スライダージョイントパラメータ
	//--------------------------------------------------------------------------------------
	struct PsSliderJointParam : public PsJointParam {
		bsm::Float3 m_Direction;
		float m_LowerDistance;
		float m_UpperDistance;
		PsSliderJointParam() :
			PsJointParam(),
			m_Direction(1.0f, 0.0f, 0.0f),
			m_LowerDistance(0.0f),
			m_UpperDistance(0.0f)
		{}
	};

	//--------------------------------------------------------------------------------------
	///	スライダージョイント
	//--------------------------------------------------------------------------------------
	class PsSliderJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsSliderJoint(const PsSliderJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsSliderJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsSliderJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	固定ジョイントパラメータ(内容は親クラスと同じ)
	//--------------------------------------------------------------------------------------
	struct PsFixJointParam : public PsJointParam {
		PsFixJointParam() :
			PsJointParam()
		{}
	};

	//--------------------------------------------------------------------------------------
	///	固定ジョイント
	//--------------------------------------------------------------------------------------
	class PsFixJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsFixJoint(const PsFixJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsFixJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsFixJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	ユニバーサルジョイントパラメータ
	//--------------------------------------------------------------------------------------
	struct PsUniversalJointParam : public PsJointParam {
		bsm::Float3 m_Axis;
		bsm::Float3 m_UpVec;
		float m_Swing1LowerAngle;
		float m_Swing1UpperAngle;
		float m_Swing2LowerAngle;
		float m_Swing2UpperAngle;
		PsUniversalJointParam() :
			PsJointParam(),
			m_Axis(1.0f, 0.0f, 0.0f),
			m_UpVec(0.0f, 1.0f, 0.0f),
			m_Swing1LowerAngle (-0.7f),
			m_Swing1UpperAngle(0.7f),
			m_Swing2LowerAngle(-0.7f),
			m_Swing2UpperAngle(0.7f)
		{}
	};

	//--------------------------------------------------------------------------------------
	///	ユニバーサルジョイント
	//--------------------------------------------------------------------------------------
	class PsUniversalJoint : public PsJoint {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	param	作成のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsUniversalJoint(const PsUniversalJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsUniversalJoint();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnInit()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化時のパラメータを得る
		@return	初期化時のパラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsUniversalJointParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	有効無効の設定（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetActive(bool b)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};



	//--------------------------------------------------------------------------------------
	///	物理計算用のインターフェイス
	//--------------------------------------------------------------------------------------
	class BasePhysics{
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		explicit BasePhysics();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~BasePhysics();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォースの初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void InitForce();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	更新
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Update(bool initForce = true);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	初期化（すべてのオブジェクトが無くなる）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単体のボックスの追加
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsBox> AddBox(const PsBoxParam& param, uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単体の球体の追加
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsSphere> AddSphere(const PsSphereParam& param,uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単体のカプセルの追加
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsCapsule> AddCapsule(const PsCapsuleParam& param, uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	単体のシリンダーの追加<br />
		シリンダーは、ボックスの縁からの落下時に不具合があるので、利用は慎重に！
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsCylinder> AddCylinder(const PsCylinderParam& param, uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	凸面オブジェクトの追加
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsConvex> AddConvex(const PsConvexParam& param, uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プリミティブ合成物理オブジェクトの追加
		@param[in]	param	作成のパラメータ
		@param[in]	index	インデックス（オブジェクトを再利用する場合）
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsCombined> AddCombined(const PsCombinedParam& param, uint16_t index = UINT16_MAX);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボールジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsBallJoint> AddBallJoint(const PsBallJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	球関節ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsSwingTwistJoint> AddSwingTwistJoint(const PsSwingTwistJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	蝶番ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsHingeJoint> AddHingeJoint(const PsHingeJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スライダージョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsSliderJoint> AddSliderJoint(const PsSliderJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	固定ジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsFixJoint> AddFixJoint(const PsFixJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ユニバーサルジョイントの追加
		@param[in]	param	作成のパラメータ
		@return	オブジェクトのポインタ（バックアップはしないので呼び出し側で保存すること）
		*/
		//--------------------------------------------------------------------------------------
		virtual shared_ptr<PsUniversalJoint> AddUniversalJoint(const PsUniversalJointParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のボディ数を得る
		@return	現在のボディ数
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetNumBodies() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを得る
		@param[in]	body_index	ボディID
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetBodyStatus(uint16_t body_index, PsBodyStatus& st) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを設定する
		@param[in]	body_index	ボディID
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyStatus(uint16_t body_index,const PsBodyUpdateStatus& st);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を起こす（sleepが有効の場合）
		@param[in]	body_index	ボディID
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void WakeUpBody(uint16_t body_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを得る
		@param[in]	body_index	ボディID
		@return	重力を計算すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsAutoGravity(uint16_t body_index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体が重力を計算するかどうかを設定する
		@param[in]	body_index	ボディID
		@param[in]	b	設定する値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAutoGravity(uint16_t body_index,bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を得る
		@param[in]	body_index	ボディID
		@return	剛体の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3 GetBodyPosition(uint16_t body_index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	body_index	ボディID
		@param[in]	pos	位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyPosition(uint16_t body_index, const bsm::Float3& pos);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転を得る
		@param[in]	body_index	ボディID
		@return	剛体の回転
		*/
		//--------------------------------------------------------------------------------------
		bsm::Quat GetBodyOrientation(uint16_t body_index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	body_index	ボディID
		@param[in]	pos	位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyOrientation(uint16_t body_index, const bsm::Quat& qt);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を得る
		@param[in]	body_index	ボディID
		@return	剛体の速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3 GetBodyLinearVelocity(uint16_t body_index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を設定する
		@param[in]	body_index	ボディID
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyLinearVelocity(uint16_t body_index, const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を得る
		@param[in]	body_index	ボディID
		@return	剛体の回転速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Float3 GetBodyAngularVelocity(uint16_t body_index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を設定する
		@param[in]	body_index	ボディID
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyAngularVelocity(uint16_t body_index, const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度をtimeStepでposに移動するよう設定する
		@param[in]	body_index	ボディID
		@param[in]	pos	移動位置
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MoveBodyPosition(uint16_t body_index, const bsm::Float3 &pos, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度をtimeStepでqtになるよう設定する
		@param[in]	body_index	ボディID
		@param[in]	qt	目標の回転
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MoveBodyOrientation(uint16_t body_index, const bsm::Quat& qt, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のフォースを追加する
		@param[in]	body_index	ボディID
		@param[in]	v	フォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyBodyForce(uint16_t body_index, const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のトルクを追加する
		@param[in]	body_index	ボディID
		@param[in]	v	トルク
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyBodyTorque(uint16_t body_index, const bsm::Float3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突セルフ衝突フィルターを設定する
		@param[in]	body_index	ボディID
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyContactFilterSelf(uint16_t body_index, uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突ターゲット衝突フィルターを設定する
		@param[in]	body_index	ボディID
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyContactFilterTarget(uint16_t body_index, uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプを設定する
		@param[in]	body_index	ボディID
		@param[in]	t	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBodyMotionType(uint16_t body_index, PsMotionType t);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のモーションタイプをを得る
		@param[in]	body_index	ボディID
		@return	形状数
		*/
		//--------------------------------------------------------------------------------------
		PsMotionType GetBodyMotionType(uint16_t body_index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	形状の数を得る
		@param[in]	body_index	ボディID
		@return	形状数
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetNumShapes(uint16_t body_index)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	形状のオフセット回転とオフセット位置を得る
		@param[in]	body_index	ボディID
		@param[in]	shape_index	形状ID
		@param[out]	qt	回転を受ける参照
		@param[out]	pos	位置を受ける参照
		@return　なし
		*/
		//--------------------------------------------------------------------------------------
		void GetShapeOffsetQuatPos(uint16_t body_index, uint16_t shape_index, bsm::Quat& qt, bsm::Float3& pos);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	形状のタイプを得る
		@param[in]	body_index	ボディID
		@param[in]	shape_index	形状ID
		@return　形状のタイプ
		*/
		//--------------------------------------------------------------------------------------
		sce::PhysicsEffects::ePfxShapeType GetShapeType(uint16_t body_index, uint16_t shape_index) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントの数を得る
		@return	ジョイント数
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetNumJoints()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンタクト(衝突)の数を得る
		@return	ジョイント数
		*/
		//--------------------------------------------------------------------------------------
		uint16_t GetNumContacts()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のボディがコンタクトしている相手の配列を得る
		@param[in]	body_index	ボディID
		@param[out]	contacts	相手のIDの配列
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsVec(uint16_t body_index, vector<uint16_t>& contacts)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のボディがコンタクトしている相手のset集合を得る
		@param[in]	body_index	ボディID
		@param[out]	contacts	相手のIDの集合
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsSet(uint16_t body_index, set<uint16_t>& contacts)const;
		//以下慣性を計算するstatic関数
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボックス型の慣性を返す
		@param[in]	halfExtent	3方向の半分
		@param[in]	mass	質量
		@return	慣性行列
		*/
		//--------------------------------------------------------------------------------------
		static bsm::Mat3x3 CalcInertiaBox(const bsm::Float3& halfExtent,float mass);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	球型の慣性を返す
		@param[in]	radius	半径
		@param[in]	mass	質量
		@return	慣性行列
		*/
		//--------------------------------------------------------------------------------------
		static bsm::Mat3x3 CalcInertiaSphere(float radius, float mass);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	シリンダー型（X方向に長い）の慣性を返す
		@param[in]	halfLength	半分の長さ
		@param[in]	radius	半径
		@param[in]	mass	質量
		@return	慣性行列
		*/
		//--------------------------------------------------------------------------------------
		static bsm::Mat3x3 CalcInertiaCylinderX(float halfLength, float radius, float mass);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	シリンダー型（Y方向に長い）の慣性を返す
		@param[in]	halfLength	半分の長さ
		@param[in]	radius	半径
		@param[in]	mass	質量
		@return	慣性行列
		*/
		//--------------------------------------------------------------------------------------
		static bsm::Mat3x3 CalcInertiaCylinderY(float halfLength, float radius, float mass);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	シリンダー型（Z方向に長い）の慣性を返す
		@param[in]	halfLength	半分の長さ
		@param[in]	radius	半径
		@param[in]	mass	質量
		@return	慣性行列
		*/
		//--------------------------------------------------------------------------------------
		static bsm::Mat3x3 CalcInertiaCylinderZ(float halfLength, float radius, float mass);
		//以下、直接アクセス(使用する場合は慎重に)
		//--------------------------------------------------------------------------------------
		/*!
		@brief	形状を得る
		@param[in]	body_index	ボディID
		@param[in]	shape_index	形状ID
		@return　形状の参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxShape& getPfxShape(uint16_t body_index, uint16_t shape_index) const;
		sce::PhysicsEffects::PfxShape& getPfxShape(uint16_t body_index, uint16_t shape_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステートを得る
		@param[in]	body_index	ボディID
		@return　剛体のステートの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxRigidState& getPfxRigidState(uint16_t body_index) const;
		sce::PhysicsEffects::PfxRigidState& getPfxRigidState(uint16_t body_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を得る
		@param[in]	body_index	ボディID
		@return　剛体の参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxRigidBody& getPfxRigidBody(uint16_t body_index) const;
		sce::PhysicsEffects::PfxRigidBody& getPfxRigidBody(uint16_t body_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	衝突する剛体を得る
		@param[in]	body_index	ボディID
		@return　衝突する剛体の参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxCollidable& getPfxCollidable(uint16_t body_index) const;
		sce::PhysicsEffects::PfxCollidable& getPfxCollidable(uint16_t body_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のソルバーを得る
		@param[in]	body_index	ボディID
		@return　剛体のソルバーの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxSolverBody& getPfxSolverBody(uint16_t body_index) const;
		sce::PhysicsEffects::PfxSolverBody& getPfxSolverBody(uint16_t body_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントのペアを得る
		@param[in]	joint_index	ジョイントID
		@return　ジョイントのペアの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxConstraintPair& getPfxConstraintPair(uint16_t joint_index) const;
		sce::PhysicsEffects::PfxConstraintPair& getPfxConstraintPair(uint16_t joint_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジョイントを得る
		@param[in]	joint_index	ジョイントID
		@return　ジョイントの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxJoint& getPfxJoint(uint16_t joint_index) const;
		sce::PhysicsEffects::PfxJoint& getPfxJoint(uint16_t joint_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	今のブロードフェイズペアを得る
		@param[in]	contact_index	コンタクトID
		@return　今のブロードフェイズペアの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxBroadphasePair& getNowPfxBroadphasePair(uint16_t contact_index) const;
		sce::PhysicsEffects::PfxBroadphasePair& getNowPfxBroadphasePair(uint16_t contact_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前のブロードフェイズペアを得る
		@param[in]	contact_index	コンタクトID
		@return　1つ前のブロードフェイズペアの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxBroadphasePair& getPrevPfxBroadphasePair(uint16_t contact_index) const;
		sce::PhysicsEffects::PfxBroadphasePair& getPrevPfxBroadphasePair(uint16_t contact_index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンタクトのマニホールドを得る
		@param[in]	contact_index	コンタクトID
		@return　コンタクトのマニホールドの参照
		*/
		//--------------------------------------------------------------------------------------
		const sce::PhysicsEffects::PfxContactManifold& getPfxContactManifold(uint16_t contact_index) const;
		sce::PhysicsEffects::PfxContactManifold& getPfxContactManifold(uint16_t contact_index);
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};



}
//end basedx12
